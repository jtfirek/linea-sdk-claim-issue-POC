import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export interface L2MessageServiceInterface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "GENERAL_PAUSE_TYPE" | "INBOX_STATUS_CLAIMED" | "INBOX_STATUS_RECEIVED" | "INBOX_STATUS_UNKNOWN" | "L1_L2_MESSAGE_SETTER_ROLE" | "L1_L2_PAUSE_TYPE" | "L2_L1_PAUSE_TYPE" | "MINIMUM_FEE_SETTER_ROLE" | "PAUSE_MANAGER_ROLE" | "PROVING_SYSTEM_PAUSE_TYPE" | "RATE_LIMIT_SETTER_ROLE" | "addL1L2MessageHashes" | "anchorL1L2MessageHashes" | "claimMessage" | "currentPeriodAmountInWei" | "currentPeriodEnd" | "getRoleAdmin" | "grantRole" | "hasRole" | "inboxL1L2MessageStatus" | "initialize" | "isPaused" | "l1RollingHashes" | "lastAnchoredL1MessageNumber" | "limitInWei" | "minimumFeeInWei" | "nextMessageNumber" | "pauseByType" | "pauseTypeStatuses" | "periodInSeconds" | "renounceRole" | "resetAmountUsedInPeriod" | "resetRateLimitAmount" | "revokeRole" | "sendMessage" | "sender" | "setMinimumFee" | "supportsInterface" | "unPauseByType"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AmountUsedInPeriodReset" | "Initialized" | "L1L2MessageHashesAddedToInbox" | "LimitAmountChanged" | "MessageClaimed" | "MessageSent" | "MinimumFeeChanged" | "Paused" | "RateLimitInitialized" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "RollingHashUpdated" | "ServiceVersionMigrated" | "UnPaused"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "GENERAL_PAUSE_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "INBOX_STATUS_CLAIMED", values?: undefined): string;
    encodeFunctionData(functionFragment: "INBOX_STATUS_RECEIVED", values?: undefined): string;
    encodeFunctionData(functionFragment: "INBOX_STATUS_UNKNOWN", values?: undefined): string;
    encodeFunctionData(functionFragment: "L1_L2_MESSAGE_SETTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "L1_L2_PAUSE_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "L2_L1_PAUSE_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MINIMUM_FEE_SETTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PAUSE_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PROVING_SYSTEM_PAUSE_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "RATE_LIMIT_SETTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "addL1L2MessageHashes", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "anchorL1L2MessageHashes", values: [BytesLike[], BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "claimMessage", values: [
        AddressLike,
        AddressLike,
        BigNumberish,
        BigNumberish,
        AddressLike,
        BytesLike,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "currentPeriodAmountInWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "currentPeriodEnd", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "inboxL1L2MessageStatus", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [AddressLike, AddressLike, BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "isPaused", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "l1RollingHashes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "lastAnchoredL1MessageNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "limitInWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "minimumFeeInWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextMessageNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "pauseByType", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "pauseTypeStatuses", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "periodInSeconds", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "resetAmountUsedInPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "resetRateLimitAmount", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "sendMessage", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "sender", values?: undefined): string;
    encodeFunctionData(functionFragment: "setMinimumFee", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "unPauseByType", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "GENERAL_PAUSE_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "INBOX_STATUS_CLAIMED", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "INBOX_STATUS_RECEIVED", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "INBOX_STATUS_UNKNOWN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "L1_L2_MESSAGE_SETTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "L1_L2_PAUSE_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "L2_L1_PAUSE_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MINIMUM_FEE_SETTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PAUSE_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PROVING_SYSTEM_PAUSE_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "RATE_LIMIT_SETTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addL1L2MessageHashes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "anchorL1L2MessageHashes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentPeriodAmountInWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentPeriodEnd", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboxL1L2MessageStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "l1RollingHashes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastAnchoredL1MessageNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "limitInWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumFeeInWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextMessageNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pauseByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pauseTypeStatuses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "periodInSeconds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetAmountUsedInPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetRateLimitAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinimumFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unPauseByType", data: BytesLike): Result;
}
export declare namespace AmountUsedInPeriodResetEvent {
    type InputTuple = [resettingAddress: AddressLike];
    type OutputTuple = [resettingAddress: string];
    interface OutputObject {
        resettingAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InitializedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace L1L2MessageHashesAddedToInboxEvent {
    type InputTuple = [messageHashes: BytesLike[]];
    type OutputTuple = [messageHashes: string[]];
    interface OutputObject {
        messageHashes: string[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace LimitAmountChangedEvent {
    type InputTuple = [
        amountChangeBy: AddressLike,
        amount: BigNumberish,
        amountUsedLoweredToLimit: boolean,
        usedAmountResetToZero: boolean
    ];
    type OutputTuple = [
        amountChangeBy: string,
        amount: bigint,
        amountUsedLoweredToLimit: boolean,
        usedAmountResetToZero: boolean
    ];
    interface OutputObject {
        amountChangeBy: string;
        amount: bigint;
        amountUsedLoweredToLimit: boolean;
        usedAmountResetToZero: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace MessageClaimedEvent {
    type InputTuple = [_messageHash: BytesLike];
    type OutputTuple = [_messageHash: string];
    interface OutputObject {
        _messageHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace MessageSentEvent {
    type InputTuple = [
        _from: AddressLike,
        _to: AddressLike,
        _fee: BigNumberish,
        _value: BigNumberish,
        _nonce: BigNumberish,
        _calldata: BytesLike,
        _messageHash: BytesLike
    ];
    type OutputTuple = [
        _from: string,
        _to: string,
        _fee: bigint,
        _value: bigint,
        _nonce: bigint,
        _calldata: string,
        _messageHash: string
    ];
    interface OutputObject {
        _from: string;
        _to: string;
        _fee: bigint;
        _value: bigint;
        _nonce: bigint;
        _calldata: string;
        _messageHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace MinimumFeeChangedEvent {
    type InputTuple = [
        previousMinimumFee: BigNumberish,
        newMinimumFee: BigNumberish,
        calledBy: AddressLike
    ];
    type OutputTuple = [
        previousMinimumFee: bigint,
        newMinimumFee: bigint,
        calledBy: string
    ];
    interface OutputObject {
        previousMinimumFee: bigint;
        newMinimumFee: bigint;
        calledBy: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace PausedEvent {
    type InputTuple = [
        messageSender: AddressLike,
        pauseType: BigNumberish
    ];
    type OutputTuple = [messageSender: string, pauseType: bigint];
    interface OutputObject {
        messageSender: string;
        pauseType: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RateLimitInitializedEvent {
    type InputTuple = [
        periodInSeconds: BigNumberish,
        limitInWei: BigNumberish,
        currentPeriodEnd: BigNumberish
    ];
    type OutputTuple = [
        periodInSeconds: bigint,
        limitInWei: bigint,
        currentPeriodEnd: bigint
    ];
    interface OutputObject {
        periodInSeconds: bigint;
        limitInWei: bigint;
        currentPeriodEnd: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleAdminChangedEvent {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleGrantedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleRevokedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RollingHashUpdatedEvent {
    type InputTuple = [
        messageNumber: BigNumberish,
        rollingHash: BytesLike
    ];
    type OutputTuple = [messageNumber: bigint, rollingHash: string];
    interface OutputObject {
        messageNumber: bigint;
        rollingHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ServiceVersionMigratedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UnPausedEvent {
    type InputTuple = [
        messageSender: AddressLike,
        pauseType: BigNumberish
    ];
    type OutputTuple = [messageSender: string, pauseType: bigint];
    interface OutputObject {
        messageSender: string;
        pauseType: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface L2MessageService extends BaseContract {
    connect(runner?: ContractRunner | null): L2MessageService;
    waitForDeployment(): Promise<this>;
    interface: L2MessageServiceInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    GENERAL_PAUSE_TYPE: TypedContractMethod<[], [bigint], "view">;
    INBOX_STATUS_CLAIMED: TypedContractMethod<[], [bigint], "view">;
    INBOX_STATUS_RECEIVED: TypedContractMethod<[], [bigint], "view">;
    INBOX_STATUS_UNKNOWN: TypedContractMethod<[], [bigint], "view">;
    L1_L2_MESSAGE_SETTER_ROLE: TypedContractMethod<[], [string], "view">;
    L1_L2_PAUSE_TYPE: TypedContractMethod<[], [bigint], "view">;
    L2_L1_PAUSE_TYPE: TypedContractMethod<[], [bigint], "view">;
    MINIMUM_FEE_SETTER_ROLE: TypedContractMethod<[], [string], "view">;
    PAUSE_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;
    PROVING_SYSTEM_PAUSE_TYPE: TypedContractMethod<[], [bigint], "view">;
    RATE_LIMIT_SETTER_ROLE: TypedContractMethod<[], [string], "view">;
    addL1L2MessageHashes: TypedContractMethod<[
        _messageHashes: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    anchorL1L2MessageHashes: TypedContractMethod<[
        _messageHashes: BytesLike[],
        _startingMessageNumber: BigNumberish,
        _finalMessageNumber: BigNumberish,
        _finalRollingHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    claimMessage: TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _fee: BigNumberish,
        _value: BigNumberish,
        _feeRecipient: AddressLike,
        _calldata: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    currentPeriodAmountInWei: TypedContractMethod<[], [bigint], "view">;
    currentPeriodEnd: TypedContractMethod<[], [bigint], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    inboxL1L2MessageStatus: TypedContractMethod<[
        messageHash: BytesLike
    ], [
        bigint
    ], "view">;
    initialize: TypedContractMethod<[
        _securityCouncil: AddressLike,
        _l1l2MessageSetter: AddressLike,
        _rateLimitPeriod: BigNumberish,
        _rateLimitAmount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    isPaused: TypedContractMethod<[_pauseType: BigNumberish], [boolean], "view">;
    l1RollingHashes: TypedContractMethod<[
        messageNumber: BigNumberish
    ], [
        string
    ], "view">;
    lastAnchoredL1MessageNumber: TypedContractMethod<[], [bigint], "view">;
    limitInWei: TypedContractMethod<[], [bigint], "view">;
    minimumFeeInWei: TypedContractMethod<[], [bigint], "view">;
    nextMessageNumber: TypedContractMethod<[], [bigint], "view">;
    pauseByType: TypedContractMethod<[
        _pauseType: BigNumberish
    ], [
        void
    ], "nonpayable">;
    pauseTypeStatuses: TypedContractMethod<[
        pauseType: BytesLike
    ], [
        boolean
    ], "view">;
    periodInSeconds: TypedContractMethod<[], [bigint], "view">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    resetAmountUsedInPeriod: TypedContractMethod<[], [void], "nonpayable">;
    resetRateLimitAmount: TypedContractMethod<[
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    sendMessage: TypedContractMethod<[
        _to: AddressLike,
        _fee: BigNumberish,
        _calldata: BytesLike
    ], [
        void
    ], "payable">;
    sender: TypedContractMethod<[], [string], "view">;
    setMinimumFee: TypedContractMethod<[
        _feeInWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    unPauseByType: TypedContractMethod<[
        _pauseType: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "GENERAL_PAUSE_TYPE"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "INBOX_STATUS_CLAIMED"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "INBOX_STATUS_RECEIVED"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "INBOX_STATUS_UNKNOWN"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "L1_L2_MESSAGE_SETTER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "L1_L2_PAUSE_TYPE"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "L2_L1_PAUSE_TYPE"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "MINIMUM_FEE_SETTER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "PAUSE_MANAGER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "PROVING_SYSTEM_PAUSE_TYPE"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "RATE_LIMIT_SETTER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "addL1L2MessageHashes"): TypedContractMethod<[_messageHashes: BytesLike[]], [void], "nonpayable">;
    getFunction(nameOrSignature: "anchorL1L2MessageHashes"): TypedContractMethod<[
        _messageHashes: BytesLike[],
        _startingMessageNumber: BigNumberish,
        _finalMessageNumber: BigNumberish,
        _finalRollingHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "claimMessage"): TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _fee: BigNumberish,
        _value: BigNumberish,
        _feeRecipient: AddressLike,
        _calldata: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "currentPeriodAmountInWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "currentPeriodEnd"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "inboxL1L2MessageStatus"): TypedContractMethod<[messageHash: BytesLike], [bigint], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        _securityCouncil: AddressLike,
        _l1l2MessageSetter: AddressLike,
        _rateLimitPeriod: BigNumberish,
        _rateLimitAmount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "isPaused"): TypedContractMethod<[_pauseType: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "l1RollingHashes"): TypedContractMethod<[messageNumber: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "lastAnchoredL1MessageNumber"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "limitInWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "minimumFeeInWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "nextMessageNumber"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "pauseByType"): TypedContractMethod<[_pauseType: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "pauseTypeStatuses"): TypedContractMethod<[pauseType: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "periodInSeconds"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "resetAmountUsedInPeriod"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "resetRateLimitAmount"): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "sendMessage"): TypedContractMethod<[
        _to: AddressLike,
        _fee: BigNumberish,
        _calldata: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "sender"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "setMinimumFee"): TypedContractMethod<[_feeInWei: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "unPauseByType"): TypedContractMethod<[_pauseType: BigNumberish], [void], "nonpayable">;
    getEvent(key: "AmountUsedInPeriodReset"): TypedContractEvent<AmountUsedInPeriodResetEvent.InputTuple, AmountUsedInPeriodResetEvent.OutputTuple, AmountUsedInPeriodResetEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    getEvent(key: "L1L2MessageHashesAddedToInbox"): TypedContractEvent<L1L2MessageHashesAddedToInboxEvent.InputTuple, L1L2MessageHashesAddedToInboxEvent.OutputTuple, L1L2MessageHashesAddedToInboxEvent.OutputObject>;
    getEvent(key: "LimitAmountChanged"): TypedContractEvent<LimitAmountChangedEvent.InputTuple, LimitAmountChangedEvent.OutputTuple, LimitAmountChangedEvent.OutputObject>;
    getEvent(key: "MessageClaimed"): TypedContractEvent<MessageClaimedEvent.InputTuple, MessageClaimedEvent.OutputTuple, MessageClaimedEvent.OutputObject>;
    getEvent(key: "MessageSent"): TypedContractEvent<MessageSentEvent.InputTuple, MessageSentEvent.OutputTuple, MessageSentEvent.OutputObject>;
    getEvent(key: "MinimumFeeChanged"): TypedContractEvent<MinimumFeeChangedEvent.InputTuple, MinimumFeeChangedEvent.OutputTuple, MinimumFeeChangedEvent.OutputObject>;
    getEvent(key: "Paused"): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    getEvent(key: "RateLimitInitialized"): TypedContractEvent<RateLimitInitializedEvent.InputTuple, RateLimitInitializedEvent.OutputTuple, RateLimitInitializedEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    getEvent(key: "RollingHashUpdated"): TypedContractEvent<RollingHashUpdatedEvent.InputTuple, RollingHashUpdatedEvent.OutputTuple, RollingHashUpdatedEvent.OutputObject>;
    getEvent(key: "ServiceVersionMigrated"): TypedContractEvent<ServiceVersionMigratedEvent.InputTuple, ServiceVersionMigratedEvent.OutputTuple, ServiceVersionMigratedEvent.OutputObject>;
    getEvent(key: "UnPaused"): TypedContractEvent<UnPausedEvent.InputTuple, UnPausedEvent.OutputTuple, UnPausedEvent.OutputObject>;
    filters: {
        "AmountUsedInPeriodReset(address)": TypedContractEvent<AmountUsedInPeriodResetEvent.InputTuple, AmountUsedInPeriodResetEvent.OutputTuple, AmountUsedInPeriodResetEvent.OutputObject>;
        AmountUsedInPeriodReset: TypedContractEvent<AmountUsedInPeriodResetEvent.InputTuple, AmountUsedInPeriodResetEvent.OutputTuple, AmountUsedInPeriodResetEvent.OutputObject>;
        "Initialized(uint8)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        "L1L2MessageHashesAddedToInbox(bytes32[])": TypedContractEvent<L1L2MessageHashesAddedToInboxEvent.InputTuple, L1L2MessageHashesAddedToInboxEvent.OutputTuple, L1L2MessageHashesAddedToInboxEvent.OutputObject>;
        L1L2MessageHashesAddedToInbox: TypedContractEvent<L1L2MessageHashesAddedToInboxEvent.InputTuple, L1L2MessageHashesAddedToInboxEvent.OutputTuple, L1L2MessageHashesAddedToInboxEvent.OutputObject>;
        "LimitAmountChanged(address,uint256,bool,bool)": TypedContractEvent<LimitAmountChangedEvent.InputTuple, LimitAmountChangedEvent.OutputTuple, LimitAmountChangedEvent.OutputObject>;
        LimitAmountChanged: TypedContractEvent<LimitAmountChangedEvent.InputTuple, LimitAmountChangedEvent.OutputTuple, LimitAmountChangedEvent.OutputObject>;
        "MessageClaimed(bytes32)": TypedContractEvent<MessageClaimedEvent.InputTuple, MessageClaimedEvent.OutputTuple, MessageClaimedEvent.OutputObject>;
        MessageClaimed: TypedContractEvent<MessageClaimedEvent.InputTuple, MessageClaimedEvent.OutputTuple, MessageClaimedEvent.OutputObject>;
        "MessageSent(address,address,uint256,uint256,uint256,bytes,bytes32)": TypedContractEvent<MessageSentEvent.InputTuple, MessageSentEvent.OutputTuple, MessageSentEvent.OutputObject>;
        MessageSent: TypedContractEvent<MessageSentEvent.InputTuple, MessageSentEvent.OutputTuple, MessageSentEvent.OutputObject>;
        "MinimumFeeChanged(uint256,uint256,address)": TypedContractEvent<MinimumFeeChangedEvent.InputTuple, MinimumFeeChangedEvent.OutputTuple, MinimumFeeChangedEvent.OutputObject>;
        MinimumFeeChanged: TypedContractEvent<MinimumFeeChangedEvent.InputTuple, MinimumFeeChangedEvent.OutputTuple, MinimumFeeChangedEvent.OutputObject>;
        "Paused(address,uint256)": TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
        Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
        "RateLimitInitialized(uint256,uint256,uint256)": TypedContractEvent<RateLimitInitializedEvent.InputTuple, RateLimitInitializedEvent.OutputTuple, RateLimitInitializedEvent.OutputObject>;
        RateLimitInitialized: TypedContractEvent<RateLimitInitializedEvent.InputTuple, RateLimitInitializedEvent.OutputTuple, RateLimitInitializedEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        "RollingHashUpdated(uint256,bytes32)": TypedContractEvent<RollingHashUpdatedEvent.InputTuple, RollingHashUpdatedEvent.OutputTuple, RollingHashUpdatedEvent.OutputObject>;
        RollingHashUpdated: TypedContractEvent<RollingHashUpdatedEvent.InputTuple, RollingHashUpdatedEvent.OutputTuple, RollingHashUpdatedEvent.OutputObject>;
        "ServiceVersionMigrated(uint256)": TypedContractEvent<ServiceVersionMigratedEvent.InputTuple, ServiceVersionMigratedEvent.OutputTuple, ServiceVersionMigratedEvent.OutputObject>;
        ServiceVersionMigrated: TypedContractEvent<ServiceVersionMigratedEvent.InputTuple, ServiceVersionMigratedEvent.OutputTuple, ServiceVersionMigratedEvent.OutputObject>;
        "UnPaused(address,uint256)": TypedContractEvent<UnPausedEvent.InputTuple, UnPausedEvent.OutputTuple, UnPausedEvent.OutputObject>;
        UnPaused: TypedContractEvent<UnPausedEvent.InputTuple, UnPausedEvent.OutputTuple, UnPausedEvent.OutputObject>;
    };
}
