import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export declare namespace IZkEvmV2 {
    type BlockDataStruct = {
        blockRootHash: BytesLike;
        l2BlockTimestamp: BigNumberish;
        transactions: BytesLike[];
        l2ToL1MsgHashes: BytesLike[];
        fromAddresses: BytesLike;
        batchReceptionIndices: BigNumberish[];
    };
    type BlockDataStructOutput = [
        blockRootHash: string,
        l2BlockTimestamp: bigint,
        transactions: string[],
        l2ToL1MsgHashes: string[],
        fromAddresses: string,
        batchReceptionIndices: bigint[]
    ] & {
        blockRootHash: string;
        l2BlockTimestamp: bigint;
        transactions: string[];
        l2ToL1MsgHashes: string[];
        fromAddresses: string;
        batchReceptionIndices: bigint[];
    };
}
export interface ZkEvmV2Interface extends Interface {
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE" | "GENERAL_PAUSE_TYPE" | "INBOX_STATUS_RECEIVED" | "INBOX_STATUS_UNKNOWN" | "L1_L2_PAUSE_TYPE" | "L2_L1_PAUSE_TYPE" | "OPERATOR_ROLE" | "OUTBOX_STATUS_RECEIVED" | "OUTBOX_STATUS_SENT" | "OUTBOX_STATUS_UNKNOWN" | "PAUSE_MANAGER_ROLE" | "PROVING_SYSTEM_PAUSE_TYPE" | "RATE_LIMIT_SETTER_ROLE" | "claimMessage" | "currentL2BlockNumber" | "currentPeriodAmountInWei" | "currentPeriodEnd" | "currentTimestamp" | "finalizeBlocks" | "finalizeBlocksWithoutProof" | "getRoleAdmin" | "grantRole" | "hasRole" | "inboxL2L1MessageStatus" | "initialize" | "limitInWei" | "nextMessageNumber" | "outboxL1L2MessageStatus" | "pauseByType" | "pauseTypeStatuses" | "periodInSeconds" | "renounceRole" | "resetAmountUsedInPeriod" | "resetRateLimitAmount" | "revokeRole" | "sendMessage" | "sender" | "setVerifierAddress" | "stateRootHashes" | "supportsInterface" | "unPauseByType" | "verifiers"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AmountUsedInPeriodReset" | "BlockFinalized" | "BlocksVerificationDone" | "Initialized" | "L1L2MessagesReceivedOnL2" | "L2L1MessageHashAddedToInbox" | "LimitAmountChanged" | "MessageClaimed" | "MessageSent" | "Paused" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "UnPaused" | "VerifierAddressChanged"): EventFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "GENERAL_PAUSE_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "INBOX_STATUS_RECEIVED", values?: undefined): string;
    encodeFunctionData(functionFragment: "INBOX_STATUS_UNKNOWN", values?: undefined): string;
    encodeFunctionData(functionFragment: "L1_L2_PAUSE_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "L2_L1_PAUSE_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "OPERATOR_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "OUTBOX_STATUS_RECEIVED", values?: undefined): string;
    encodeFunctionData(functionFragment: "OUTBOX_STATUS_SENT", values?: undefined): string;
    encodeFunctionData(functionFragment: "OUTBOX_STATUS_UNKNOWN", values?: undefined): string;
    encodeFunctionData(functionFragment: "PAUSE_MANAGER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "PROVING_SYSTEM_PAUSE_TYPE", values?: undefined): string;
    encodeFunctionData(functionFragment: "RATE_LIMIT_SETTER_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "claimMessage", values: [
        AddressLike,
        AddressLike,
        BigNumberish,
        BigNumberish,
        AddressLike,
        BytesLike,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "currentL2BlockNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "currentPeriodAmountInWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "currentPeriodEnd", values?: undefined): string;
    encodeFunctionData(functionFragment: "currentTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "finalizeBlocks", values: [IZkEvmV2.BlockDataStruct[], BytesLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "finalizeBlocksWithoutProof", values: [IZkEvmV2.BlockDataStruct[]]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "inboxL2L1MessageStatus", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        BytesLike,
        BigNumberish,
        AddressLike,
        AddressLike,
        AddressLike[],
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "limitInWei", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextMessageNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "outboxL1L2MessageStatus", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "pauseByType", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "pauseTypeStatuses", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "periodInSeconds", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "resetAmountUsedInPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "resetRateLimitAmount", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "sendMessage", values: [AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "sender", values?: undefined): string;
    encodeFunctionData(functionFragment: "setVerifierAddress", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "stateRootHashes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "unPauseByType", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "verifiers", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "GENERAL_PAUSE_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "INBOX_STATUS_RECEIVED", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "INBOX_STATUS_UNKNOWN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "L1_L2_PAUSE_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "L2_L1_PAUSE_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OPERATOR_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OUTBOX_STATUS_RECEIVED", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OUTBOX_STATUS_SENT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OUTBOX_STATUS_UNKNOWN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PAUSE_MANAGER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PROVING_SYSTEM_PAUSE_TYPE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "RATE_LIMIT_SETTER_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentL2BlockNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentPeriodAmountInWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentPeriodEnd", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "currentTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeBlocks", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeBlocksWithoutProof", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboxL2L1MessageStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "limitInWei", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextMessageNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboxL1L2MessageStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pauseByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pauseTypeStatuses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "periodInSeconds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetAmountUsedInPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetRateLimitAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setVerifierAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stateRootHashes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unPauseByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;
}
export declare namespace AmountUsedInPeriodResetEvent {
    type InputTuple = [resettingAddress: AddressLike];
    type OutputTuple = [resettingAddress: string];
    interface OutputObject {
        resettingAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace BlockFinalizedEvent {
    type InputTuple = [
        blockNumber: BigNumberish,
        stateRootHash: BytesLike
    ];
    type OutputTuple = [blockNumber: bigint, stateRootHash: string];
    interface OutputObject {
        blockNumber: bigint;
        stateRootHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace BlocksVerificationDoneEvent {
    type InputTuple = [
        lastBlockFinalized: BigNumberish,
        startingRootHash: BytesLike,
        finalRootHash: BytesLike
    ];
    type OutputTuple = [
        lastBlockFinalized: bigint,
        startingRootHash: string,
        finalRootHash: string
    ];
    interface OutputObject {
        lastBlockFinalized: bigint;
        startingRootHash: string;
        finalRootHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InitializedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace L1L2MessagesReceivedOnL2Event {
    type InputTuple = [messageHashes: BytesLike[]];
    type OutputTuple = [messageHashes: string[]];
    interface OutputObject {
        messageHashes: string[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace L2L1MessageHashAddedToInboxEvent {
    type InputTuple = [messageHash: BytesLike];
    type OutputTuple = [messageHash: string];
    interface OutputObject {
        messageHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace LimitAmountChangedEvent {
    type InputTuple = [
        amountChangeBy: AddressLike,
        amount: BigNumberish,
        amountUsedLoweredToLimit: boolean,
        usedAmountResetToZero: boolean
    ];
    type OutputTuple = [
        amountChangeBy: string,
        amount: bigint,
        amountUsedLoweredToLimit: boolean,
        usedAmountResetToZero: boolean
    ];
    interface OutputObject {
        amountChangeBy: string;
        amount: bigint;
        amountUsedLoweredToLimit: boolean;
        usedAmountResetToZero: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace MessageClaimedEvent {
    type InputTuple = [_messageHash: BytesLike];
    type OutputTuple = [_messageHash: string];
    interface OutputObject {
        _messageHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace MessageSentEvent {
    type InputTuple = [
        _from: AddressLike,
        _to: AddressLike,
        _fee: BigNumberish,
        _value: BigNumberish,
        _nonce: BigNumberish,
        _calldata: BytesLike,
        _messageHash: BytesLike
    ];
    type OutputTuple = [
        _from: string,
        _to: string,
        _fee: bigint,
        _value: bigint,
        _nonce: bigint,
        _calldata: string,
        _messageHash: string
    ];
    interface OutputObject {
        _from: string;
        _to: string;
        _fee: bigint;
        _value: bigint;
        _nonce: bigint;
        _calldata: string;
        _messageHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace PausedEvent {
    type InputTuple = [messageSender: AddressLike, pauseType: BytesLike];
    type OutputTuple = [messageSender: string, pauseType: string];
    interface OutputObject {
        messageSender: string;
        pauseType: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleAdminChangedEvent {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleGrantedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleRevokedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UnPausedEvent {
    type InputTuple = [messageSender: AddressLike, pauseType: BytesLike];
    type OutputTuple = [messageSender: string, pauseType: string];
    interface OutputObject {
        messageSender: string;
        pauseType: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace VerifierAddressChangedEvent {
    type InputTuple = [
        verifierAddress: AddressLike,
        proofType: BigNumberish,
        verifierSetBy: AddressLike
    ];
    type OutputTuple = [
        verifierAddress: string,
        proofType: bigint,
        verifierSetBy: string
    ];
    interface OutputObject {
        verifierAddress: string;
        proofType: bigint;
        verifierSetBy: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface ZkEvmV2 extends BaseContract {
    connect(runner?: ContractRunner | null): ZkEvmV2;
    waitForDeployment(): Promise<this>;
    interface: ZkEvmV2Interface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    GENERAL_PAUSE_TYPE: TypedContractMethod<[], [string], "view">;
    INBOX_STATUS_RECEIVED: TypedContractMethod<[], [bigint], "view">;
    INBOX_STATUS_UNKNOWN: TypedContractMethod<[], [bigint], "view">;
    L1_L2_PAUSE_TYPE: TypedContractMethod<[], [string], "view">;
    L2_L1_PAUSE_TYPE: TypedContractMethod<[], [string], "view">;
    OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;
    OUTBOX_STATUS_RECEIVED: TypedContractMethod<[], [bigint], "view">;
    OUTBOX_STATUS_SENT: TypedContractMethod<[], [bigint], "view">;
    OUTBOX_STATUS_UNKNOWN: TypedContractMethod<[], [bigint], "view">;
    PAUSE_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;
    PROVING_SYSTEM_PAUSE_TYPE: TypedContractMethod<[], [string], "view">;
    RATE_LIMIT_SETTER_ROLE: TypedContractMethod<[], [string], "view">;
    claimMessage: TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _fee: BigNumberish,
        _value: BigNumberish,
        _feeRecipient: AddressLike,
        _calldata: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    currentL2BlockNumber: TypedContractMethod<[], [bigint], "view">;
    currentPeriodAmountInWei: TypedContractMethod<[], [bigint], "view">;
    currentPeriodEnd: TypedContractMethod<[], [bigint], "view">;
    currentTimestamp: TypedContractMethod<[], [bigint], "view">;
    finalizeBlocks: TypedContractMethod<[
        _blocksData: IZkEvmV2.BlockDataStruct[],
        _proof: BytesLike,
        _proofType: BigNumberish,
        _parentStateRootHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    finalizeBlocksWithoutProof: TypedContractMethod<[
        _blocksData: IZkEvmV2.BlockDataStruct[]
    ], [
        void
    ], "nonpayable">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    inboxL2L1MessageStatus: TypedContractMethod<[
        arg0: BytesLike
    ], [
        bigint
    ], "view">;
    initialize: TypedContractMethod<[
        _initialStateRootHash: BytesLike,
        _initialL2BlockNumber: BigNumberish,
        _defaultVerifier: AddressLike,
        _securityCouncil: AddressLike,
        _operators: AddressLike[],
        _rateLimitPeriodInSeconds: BigNumberish,
        _rateLimitAmountInWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    limitInWei: TypedContractMethod<[], [bigint], "view">;
    nextMessageNumber: TypedContractMethod<[], [bigint], "view">;
    outboxL1L2MessageStatus: TypedContractMethod<[
        arg0: BytesLike
    ], [
        bigint
    ], "view">;
    pauseByType: TypedContractMethod<[
        _pauseType: BytesLike
    ], [
        void
    ], "nonpayable">;
    pauseTypeStatuses: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
    periodInSeconds: TypedContractMethod<[], [bigint], "view">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    resetAmountUsedInPeriod: TypedContractMethod<[], [void], "nonpayable">;
    resetRateLimitAmount: TypedContractMethod<[
        _amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    sendMessage: TypedContractMethod<[
        _to: AddressLike,
        _fee: BigNumberish,
        _calldata: BytesLike
    ], [
        void
    ], "payable">;
    sender: TypedContractMethod<[], [string], "view">;
    setVerifierAddress: TypedContractMethod<[
        _newVerifierAddress: AddressLike,
        _proofType: BigNumberish
    ], [
        void
    ], "nonpayable">;
    stateRootHashes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    unPauseByType: TypedContractMethod<[
        _pauseType: BytesLike
    ], [
        void
    ], "nonpayable">;
    verifiers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "GENERAL_PAUSE_TYPE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "INBOX_STATUS_RECEIVED"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "INBOX_STATUS_UNKNOWN"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "L1_L2_PAUSE_TYPE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "L2_L1_PAUSE_TYPE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "OPERATOR_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "OUTBOX_STATUS_RECEIVED"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "OUTBOX_STATUS_SENT"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "OUTBOX_STATUS_UNKNOWN"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "PAUSE_MANAGER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "PROVING_SYSTEM_PAUSE_TYPE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "RATE_LIMIT_SETTER_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "claimMessage"): TypedContractMethod<[
        _from: AddressLike,
        _to: AddressLike,
        _fee: BigNumberish,
        _value: BigNumberish,
        _feeRecipient: AddressLike,
        _calldata: BytesLike,
        _nonce: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "currentL2BlockNumber"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "currentPeriodAmountInWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "currentPeriodEnd"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "currentTimestamp"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "finalizeBlocks"): TypedContractMethod<[
        _blocksData: IZkEvmV2.BlockDataStruct[],
        _proof: BytesLike,
        _proofType: BigNumberish,
        _parentStateRootHash: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "finalizeBlocksWithoutProof"): TypedContractMethod<[
        _blocksData: IZkEvmV2.BlockDataStruct[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "inboxL2L1MessageStatus"): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        _initialStateRootHash: BytesLike,
        _initialL2BlockNumber: BigNumberish,
        _defaultVerifier: AddressLike,
        _securityCouncil: AddressLike,
        _operators: AddressLike[],
        _rateLimitPeriodInSeconds: BigNumberish,
        _rateLimitAmountInWei: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "limitInWei"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "nextMessageNumber"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "outboxL1L2MessageStatus"): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
    getFunction(nameOrSignature: "pauseByType"): TypedContractMethod<[_pauseType: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "pauseTypeStatuses"): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "periodInSeconds"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "resetAmountUsedInPeriod"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "resetRateLimitAmount"): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "sendMessage"): TypedContractMethod<[
        _to: AddressLike,
        _fee: BigNumberish,
        _calldata: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "sender"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "setVerifierAddress"): TypedContractMethod<[
        _newVerifierAddress: AddressLike,
        _proofType: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "stateRootHashes"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "unPauseByType"): TypedContractMethod<[_pauseType: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "verifiers"): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getEvent(key: "AmountUsedInPeriodReset"): TypedContractEvent<AmountUsedInPeriodResetEvent.InputTuple, AmountUsedInPeriodResetEvent.OutputTuple, AmountUsedInPeriodResetEvent.OutputObject>;
    getEvent(key: "BlockFinalized"): TypedContractEvent<BlockFinalizedEvent.InputTuple, BlockFinalizedEvent.OutputTuple, BlockFinalizedEvent.OutputObject>;
    getEvent(key: "BlocksVerificationDone"): TypedContractEvent<BlocksVerificationDoneEvent.InputTuple, BlocksVerificationDoneEvent.OutputTuple, BlocksVerificationDoneEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    getEvent(key: "L1L2MessagesReceivedOnL2"): TypedContractEvent<L1L2MessagesReceivedOnL2Event.InputTuple, L1L2MessagesReceivedOnL2Event.OutputTuple, L1L2MessagesReceivedOnL2Event.OutputObject>;
    getEvent(key: "L2L1MessageHashAddedToInbox"): TypedContractEvent<L2L1MessageHashAddedToInboxEvent.InputTuple, L2L1MessageHashAddedToInboxEvent.OutputTuple, L2L1MessageHashAddedToInboxEvent.OutputObject>;
    getEvent(key: "LimitAmountChanged"): TypedContractEvent<LimitAmountChangedEvent.InputTuple, LimitAmountChangedEvent.OutputTuple, LimitAmountChangedEvent.OutputObject>;
    getEvent(key: "MessageClaimed"): TypedContractEvent<MessageClaimedEvent.InputTuple, MessageClaimedEvent.OutputTuple, MessageClaimedEvent.OutputObject>;
    getEvent(key: "MessageSent"): TypedContractEvent<MessageSentEvent.InputTuple, MessageSentEvent.OutputTuple, MessageSentEvent.OutputObject>;
    getEvent(key: "Paused"): TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    getEvent(key: "UnPaused"): TypedContractEvent<UnPausedEvent.InputTuple, UnPausedEvent.OutputTuple, UnPausedEvent.OutputObject>;
    getEvent(key: "VerifierAddressChanged"): TypedContractEvent<VerifierAddressChangedEvent.InputTuple, VerifierAddressChangedEvent.OutputTuple, VerifierAddressChangedEvent.OutputObject>;
    filters: {
        "AmountUsedInPeriodReset(address)": TypedContractEvent<AmountUsedInPeriodResetEvent.InputTuple, AmountUsedInPeriodResetEvent.OutputTuple, AmountUsedInPeriodResetEvent.OutputObject>;
        AmountUsedInPeriodReset: TypedContractEvent<AmountUsedInPeriodResetEvent.InputTuple, AmountUsedInPeriodResetEvent.OutputTuple, AmountUsedInPeriodResetEvent.OutputObject>;
        "BlockFinalized(uint256,bytes32)": TypedContractEvent<BlockFinalizedEvent.InputTuple, BlockFinalizedEvent.OutputTuple, BlockFinalizedEvent.OutputObject>;
        BlockFinalized: TypedContractEvent<BlockFinalizedEvent.InputTuple, BlockFinalizedEvent.OutputTuple, BlockFinalizedEvent.OutputObject>;
        "BlocksVerificationDone(uint256,bytes32,bytes32)": TypedContractEvent<BlocksVerificationDoneEvent.InputTuple, BlocksVerificationDoneEvent.OutputTuple, BlocksVerificationDoneEvent.OutputObject>;
        BlocksVerificationDone: TypedContractEvent<BlocksVerificationDoneEvent.InputTuple, BlocksVerificationDoneEvent.OutputTuple, BlocksVerificationDoneEvent.OutputObject>;
        "Initialized(uint8)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        "L1L2MessagesReceivedOnL2(bytes32[])": TypedContractEvent<L1L2MessagesReceivedOnL2Event.InputTuple, L1L2MessagesReceivedOnL2Event.OutputTuple, L1L2MessagesReceivedOnL2Event.OutputObject>;
        L1L2MessagesReceivedOnL2: TypedContractEvent<L1L2MessagesReceivedOnL2Event.InputTuple, L1L2MessagesReceivedOnL2Event.OutputTuple, L1L2MessagesReceivedOnL2Event.OutputObject>;
        "L2L1MessageHashAddedToInbox(bytes32)": TypedContractEvent<L2L1MessageHashAddedToInboxEvent.InputTuple, L2L1MessageHashAddedToInboxEvent.OutputTuple, L2L1MessageHashAddedToInboxEvent.OutputObject>;
        L2L1MessageHashAddedToInbox: TypedContractEvent<L2L1MessageHashAddedToInboxEvent.InputTuple, L2L1MessageHashAddedToInboxEvent.OutputTuple, L2L1MessageHashAddedToInboxEvent.OutputObject>;
        "LimitAmountChanged(address,uint256,bool,bool)": TypedContractEvent<LimitAmountChangedEvent.InputTuple, LimitAmountChangedEvent.OutputTuple, LimitAmountChangedEvent.OutputObject>;
        LimitAmountChanged: TypedContractEvent<LimitAmountChangedEvent.InputTuple, LimitAmountChangedEvent.OutputTuple, LimitAmountChangedEvent.OutputObject>;
        "MessageClaimed(bytes32)": TypedContractEvent<MessageClaimedEvent.InputTuple, MessageClaimedEvent.OutputTuple, MessageClaimedEvent.OutputObject>;
        MessageClaimed: TypedContractEvent<MessageClaimedEvent.InputTuple, MessageClaimedEvent.OutputTuple, MessageClaimedEvent.OutputObject>;
        "MessageSent(address,address,uint256,uint256,uint256,bytes,bytes32)": TypedContractEvent<MessageSentEvent.InputTuple, MessageSentEvent.OutputTuple, MessageSentEvent.OutputObject>;
        MessageSent: TypedContractEvent<MessageSentEvent.InputTuple, MessageSentEvent.OutputTuple, MessageSentEvent.OutputObject>;
        "Paused(address,bytes32)": TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
        Paused: TypedContractEvent<PausedEvent.InputTuple, PausedEvent.OutputTuple, PausedEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        "UnPaused(address,bytes32)": TypedContractEvent<UnPausedEvent.InputTuple, UnPausedEvent.OutputTuple, UnPausedEvent.OutputObject>;
        UnPaused: TypedContractEvent<UnPausedEvent.InputTuple, UnPausedEvent.OutputTuple, UnPausedEvent.OutputObject>;
        "VerifierAddressChanged(address,uint256,address)": TypedContractEvent<VerifierAddressChangedEvent.InputTuple, VerifierAddressChangedEvent.OutputTuple, VerifierAddressChangedEvent.OutputObject>;
        VerifierAddressChanged: TypedContractEvent<VerifierAddressChangedEvent.InputTuple, VerifierAddressChangedEvent.OutputTuple, VerifierAddressChangedEvent.OutputObject>;
    };
}
