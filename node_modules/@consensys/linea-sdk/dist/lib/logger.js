"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLogger = exports.LineaLogger = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const winston_1 = require("winston");
const errors_1 = require("./utils/errors");
class LineaLogger {
    constructor(loggerName, options) {
        const { align, combine, colorize, timestamp, printf } = winston_1.format;
        const logFormat = printf(({ level, message, timestamp, module }) => {
            return colorize().colorize(level, `[${level.toUpperCase()}] ${timestamp} ${module} - ${message}`);
        });
        this.logger = (0, winston_1.createLogger)({
            ...options,
            defaultMeta: { module: loggerName },
            format: combine(timestamp({
                format: "YYYY-MM-DD HH:mm:ss.SSS",
            }), align(), logFormat),
        });
    }
    info(message, ...meta) {
        if (typeof message === "string") {
            this.logger.info(message, meta);
        }
        else {
            this.logger.info(message);
        }
    }
    error(message, ...meta) {
        if (typeof message === "string") {
            this.logger.error(message, meta);
        }
        else {
            this.logger.error(message);
        }
    }
    warn(message, ...meta) {
        if (typeof message === "string") {
            this.logger.warn(message, meta);
        }
        else {
            this.logger.warn(message);
        }
    }
    debug(message, ...meta) {
        if (typeof message === "string") {
            this.logger.debug(message, meta);
        }
        else {
            this.logger.debug(message);
        }
    }
    warnOrError(error, message) {
        if ((0, errors_1.shouldLogErrorAsWarning)(error)) {
            this.warn(message);
        }
        else {
            this.error(message);
        }
    }
}
exports.LineaLogger = LineaLogger;
const getLogger = (loggerName, options) => {
    return new LineaLogger(loggerName, options);
};
exports.getLogger = getLogger;
