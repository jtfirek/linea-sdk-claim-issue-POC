"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.L1ClaimingService = void 0;
const Cache_1 = require("../Cache");
class L1ClaimingService {
    constructor(l1Contract, l2Contract, network) {
        this.l1Contract = l1Contract;
        this.l2Contract = l2Contract;
        this.network = network;
        this.cache = new Cache_1.Cache();
    }
    async getFinalizationMessagingInfo(transactionHash) {
        return this.l1Contract.getFinalizationMessagingInfo(transactionHash);
    }
    async getL2MessageHashesInBlockRange(fromBlock, toBlock) {
        return this.l1Contract.getL2MessageHashesInBlockRange(fromBlock, toBlock);
    }
    getMessageSiblings(messageHash, messageHashes, treeDepth) {
        return this.l1Contract.getMessageSiblings(messageHash, messageHashes, treeDepth);
    }
    async isMessageSentAfterMigrationBlock(messageHash, migrationBlock) {
        const [messageSentEvent] = await this.l2Contract.getEvents(this.l2Contract.contract.filters.MessageSent(undefined, undefined, undefined, undefined, undefined, undefined, messageHash));
        if (!messageSentEvent) {
            throw new Error(`Message hash does not exist on L2. Message hash: ${messageHash}`);
        }
        if (migrationBlock > messageSentEvent.blockNumber) {
            return false;
        }
        return true;
    }
    async findMigrationBlock() {
        const migrationBlock = this.cache.get(`migration-block-${this.network}`);
        if (migrationBlock) {
            return migrationBlock;
        }
        const [serviceVersionMigratedEvent] = await this.l2Contract.contract.queryFilter(this.l2Contract.contract.filters.ServiceVersionMigrated(2));
        if (!serviceVersionMigratedEvent) {
            return null;
        }
        this.cache.set(`migration-block-${this.network}`, serviceVersionMigratedEvent.blockNumber);
        return serviceVersionMigratedEvent.blockNumber;
    }
    async getMessageProof(messageHash) {
        return this.l1Contract.getMessageProof(messageHash);
    }
    async isClaimingNeedingProof(messageHash) {
        const migrationBlock = await this.findMigrationBlock();
        if (!migrationBlock) {
            return false;
        }
        return this.isMessageSentAfterMigrationBlock(messageHash, migrationBlock);
    }
    async getMessageStatus(messageHash, overrides = {}) {
        const isClaimingNeedingProof = await this.isClaimingNeedingProof(messageHash.toString());
        if (!isClaimingNeedingProof) {
            return this.getMessageStatusUsingMessageHash(messageHash, overrides);
        }
        return this.getMessageStatusUsingMerkleTree(messageHash, overrides);
    }
    async getMessageStatusUsingMessageHash(messageHash, overrides = {}) {
        return this.l1Contract.getMessageStatusUsingMessageHash(messageHash, overrides);
    }
    async getMessageStatusUsingMerkleTree(messageHash, overrides = {}) {
        return this.l1Contract.getMessageStatusUsingMerkleTree(messageHash, overrides);
    }
    async estimateClaimMessageGas(message, overrides = {}) {
        const isClaimingNeedingProof = await this.isClaimingNeedingProof(message.messageHash);
        if (!isClaimingNeedingProof) {
            return this.l1Contract.estimateClaimWithoutProofGas(message, overrides);
        }
        return this.l1Contract.estimateClaimGas(message, overrides);
    }
    async claimMessage(message, overrides = {}) {
        const isClaimingNeedingProof = await this.isClaimingNeedingProof(message.messageHash);
        if (!isClaimingNeedingProof) {
            return this.l1Contract.claimWithoutProof(message, overrides);
        }
        return this.l1Contract.claim(message, overrides);
    }
}
exports.L1ClaimingService = L1ClaimingService;
