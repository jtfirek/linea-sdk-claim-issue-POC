import { BetterSqlite3ConnectionOptions } from "typeorm/driver/better-sqlite3/BetterSqlite3ConnectionOptions";
import { PostgresConnectionOptions } from "typeorm/driver/postgres/PostgresConnectionOptions";
import { LoggerOptions } from "winston";
import { Direction, MessageStatus } from "./enums";
export type PostmanConfig = {
    l1Config: L1NetworkConfig;
    l2Config: L2NetworkConfig;
    l1L2AutoClaimEnabled: boolean;
    l2L1AutoClaimEnabled: boolean;
    databaseOptions: DBConfig;
    databaseCleanerConfig?: DBCleanerConfig;
    loggerOptions?: LoggerOptions;
};
export type DBConfig = PostgresConnectionOptions | BetterSqlite3ConnectionOptions;
export type DBCleanerConfig = {
    enabled: boolean;
    cleaningInterval?: number;
    daysBeforeNowToDelete?: number;
};
type NetworkConfig = {
    claiming: ClaimingConfig;
    listener: ListenerConfig;
    rpcUrl: string;
    messageServiceContractAddress: string;
    isEOAEnabled?: boolean;
    isCalldataEnabled?: boolean;
};
export type L1NetworkConfig = NetworkConfig;
export type L2NetworkConfig = NetworkConfig & {
    l2MessageTreeDepth?: number;
};
export type ClaimingConfig = {
    signerPrivateKey: string;
    messageSubmissionTimeout: number;
    feeRecipientAddress?: string;
    maxNonceDiff?: number;
    maxFeePerGas?: number;
    gasEstimationPercentile?: number;
    isMaxGasFeeEnforced?: boolean;
    profitMargin?: number;
    maxNumberOfRetries?: number;
    retryDelayInSeconds?: number;
    maxClaimGasLimit?: number;
    maxTxRetries?: number;
};
export type ListenerConfig = {
    pollingInterval?: number;
    initialFromBlock?: number;
    blockConfirmation?: number;
    maxFetchMessagesFromDb?: number;
    maxBlocksToFetchLogs?: number;
};
export type MessageInDb = {
    id?: number;
    messageSender: string;
    destination: string;
    fee: string;
    value: string;
    messageNonce: number;
    calldata: string;
    messageHash: string;
    messageContractAddress: string;
    sentBlockNumber: number;
    direction: Direction;
    status: MessageStatus;
    claimTxCreationDate?: Date;
    claimTxGasLimit?: number;
    claimTxMaxFeePerGas?: bigint;
    claimTxMaxPriorityFeePerGas?: bigint;
    claimTxNonce?: number;
    claimTxHash?: string;
    claimNumberOfRetry: number;
    claimLastRetriedAt?: Date;
    claimGasEstimationThreshold?: number;
    createdAt?: Date;
    updatedAt?: Date;
};
export {};
