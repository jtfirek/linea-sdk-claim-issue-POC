import { DataSource, DeleteResult, Repository } from "typeorm";
import { MessageEntity } from "../entity/Message.entity";
import { Direction } from "../utils/enums";
import { MessageInDb } from "../utils/types";
export declare class MessageRepository extends Repository<MessageEntity> {
    readonly dataSource: DataSource;
    constructor(dataSource: DataSource);
    findByMessageHash(message: MessageInDb, direction: Direction): Promise<MessageInDb | null>;
    insertMessage(message: MessageInDb): Promise<void>;
    updateMessage(messageHash: string, direction: Direction, messagePropertiesToUpdate: Partial<MessageInDb>): Promise<void>;
    updateMessageByTransactionHash(transactionHash: string, direction: Direction, messagePropertiesToUpdate: Partial<MessageInDb>): Promise<void>;
    saveMessages(messages: MessageInDb[]): Promise<void>;
    deleteMessages(msBeforeNowToDelete: number): Promise<DeleteResult>;
    getFirstMessageToClaim(direction: Direction, contractAddress: string, currentGasPrice: bigint, gasEstimationMargin: number, maxRetry: number, retryDelay: number): Promise<MessageInDb | null>;
    getLatestMessageSent(direction: Direction, contractAddress: string): Promise<MessageInDb | null>;
    getNFirstMessageSent(direction: Direction, limit: number, contractAddress: string): Promise<MessageInDb[]>;
    getLastTxNonce(direction: Direction): Promise<number | null>;
    getFirstPendingMessage(direction: Direction): Promise<MessageInDb | null>;
}
