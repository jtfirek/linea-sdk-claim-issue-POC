"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseCleaner = void 0;
const logger_1 = require("../../logger");
const MessageRepository_1 = require("../repositories/MessageRepository");
const helpers_1 = require("../utils/helpers");
const constants_1 = require("../../utils/constants");
class DatabaseCleaner {
    constructor(dataSource, config, loggerOptions) {
        this.logger = (0, logger_1.getLogger)(DatabaseCleaner.name, loggerOptions);
        this.messageRepository = new MessageRepository_1.MessageRepository(dataSource);
        this.shouldStopCleaning = false;
        this.enabled = config?.enabled ?? constants_1.DEFAULT_DB_CLEANER_ENABLED;
        this.cleaningInterval = config?.cleaningInterval ?? constants_1.DEFAULT_DB_CLEANING_INTERVAL;
        this.msBeforeNowToDelete =
            (config?.daysBeforeNowToDelete ?? constants_1.DEFAULT_DB_DAYS_BEFORE_NOW_TO_DELETE) * 24 * 60 * 60 * 1000;
    }
    async start() {
        if (!this.enabled) {
            this.logger.info("DatabaseCleaner is disabled");
            return;
        }
        this.logger.info("Starting DatabaseCleaner...");
        while (!this.shouldStopCleaning) {
            await this.databaseCleanerRoutine(this.msBeforeNowToDelete);
            await (0, helpers_1.wait)(this.cleaningInterval);
        }
    }
    stop() {
        this.logger.info("Stopping DatabaseCleaner...");
        this.shouldStopCleaning = true;
        this.logger.info("DatabaseCleaner stopped.");
    }
    async databaseCleanerRoutine(msBeforeNowToDelete) {
        try {
            const result = await this.messageRepository.deleteMessages(msBeforeNowToDelete);
            this.logger.info(`Database cleanup result: deleted ${JSON.stringify(result.affected)} rows`);
        }
        catch (e) {
            this.logger.error(`Error found in cleaning up database: ${JSON.stringify(e)}`);
        }
    }
}
exports.DatabaseCleaner = DatabaseCleaner;
