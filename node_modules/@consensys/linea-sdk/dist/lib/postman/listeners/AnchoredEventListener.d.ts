import { DataSource } from "typeorm";
import { L1MessageServiceContract, L2MessageServiceContract } from "../../contracts";
import { LineaLogger } from "../../logger";
import { MessageRepository } from "../repositories/MessageRepository";
import { Direction } from "../utils/enums";
import { L1NetworkConfig, L2NetworkConfig } from "../utils/types";
export declare abstract class AnchoredEventListener<TMessageServiceContract extends L1MessageServiceContract | L2MessageServiceContract> {
    private readonly messageServiceContract;
    protected readonly direction: Direction;
    protected logger: LineaLogger;
    protected maxFetchMessagesFromDb: number;
    protected shouldStopListening: boolean;
    messageRepository: MessageRepository;
    protected originContractAddress: string;
    protected pollingInterval: number;
    constructor(dataSource: DataSource, messageServiceContract: TMessageServiceContract, config: L1NetworkConfig | L2NetworkConfig, direction: Direction);
    start(): Promise<void>;
    stop(): void;
    listenForMessageAnchoringEvents(): Promise<void>;
}
