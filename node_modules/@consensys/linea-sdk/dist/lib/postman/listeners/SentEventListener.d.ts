import { DataSource } from "typeorm";
import { L1MessageServiceContract, L2MessageServiceContract } from "../../contracts";
import { LineaLogger } from "../../logger";
import { MessageRepository } from "../repositories/MessageRepository";
import { Direction } from "../utils/enums";
import { L1NetworkConfig, L2NetworkConfig } from "../utils/types";
export declare abstract class SentEventListener<TMessageServiceContract extends L1MessageServiceContract | L2MessageServiceContract> {
    readonly messageServiceContract: TMessageServiceContract;
    protected readonly direction: Direction;
    logger: LineaLogger;
    protected maxBlocksToFetchLogs: number;
    protected backtrackNumberOfBlocks: number;
    shouldStopListening: boolean;
    messageRepository: MessageRepository;
    protected originContractAddress: string;
    protected blockConfirmation: number;
    protected pollingInterval: number;
    protected initialFromBlock?: number;
    protected isEOAEnabled: boolean;
    protected isCalldataEnabled: boolean;
    constructor(dataSource: DataSource, messageServiceContract: TMessageServiceContract, config: L1NetworkConfig | L2NetworkConfig, direction: Direction);
    calculateFromBlockNumber(fromBlockNumber: number, toBlockNumber: number): number;
    getLatestMessageSentBlockNumber(direction: Direction): Promise<number | null>;
    start(): Promise<void>;
    stop(): void;
    listenForMessageSentEvents(interval: number, fromBlock: number, fromBlockLogIndex: number): Promise<void>;
    protected shouldProcessMessage(messageCalldata: string, messageHash: string): boolean;
}
