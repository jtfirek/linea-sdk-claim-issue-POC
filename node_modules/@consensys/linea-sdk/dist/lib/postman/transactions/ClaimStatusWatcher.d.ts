import { DataSource } from "typeorm";
import { TransactionReceipt } from "ethers";
import { MessageRepository } from "../repositories/MessageRepository";
import { L1NetworkConfig, L2NetworkConfig } from "../utils/types";
import { LineaLogger } from "../../logger";
import { Direction } from "../utils/enums";
import { L1MessageServiceContract, L2MessageServiceContract } from "../../contracts";
export declare abstract class ClaimStatusWatcher<TMessageServiceContract extends L1MessageServiceContract | L2MessageServiceContract> {
    private dataSource;
    private readonly messageServiceContract;
    protected readonly direction: Direction;
    protected logger: LineaLogger;
    protected shouldStopListening: boolean;
    protected messageRepository: MessageRepository;
    private submissionTimeout;
    protected pollingInterval: number;
    protected maxTxRetries: number;
    private messageBeingRetry;
    constructor(dataSource: DataSource, messageServiceContract: TMessageServiceContract, config: L1NetworkConfig | L2NetworkConfig, direction: Direction);
    start(): Promise<void>;
    stop(): void;
    protected waitForReceipt(interval: number): Promise<void>;
    protected retryTransaction(transactionHash: string, messageHash: string): Promise<TransactionReceipt>;
    protected updateReceiptStatus(receipt: TransactionReceipt): Promise<void>;
    protected abstract isRateLimitExceededError(transactionHash: string): Promise<boolean>;
}
