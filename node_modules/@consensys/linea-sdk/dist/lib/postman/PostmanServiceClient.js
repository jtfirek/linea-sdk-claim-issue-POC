"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostmanServiceClient = void 0;
const ethers_1 = require("ethers");
const contracts_1 = require("../contracts");
const logger_1 = require("../logger");
const DatabaseCleaner_1 = require("./cleaners/DatabaseCleaner");
const dataSource_1 = require("./dataSource");
const listeners_1 = require("./listeners");
const transactions_1 = require("./transactions");
const L2MessageReadOnlyProvider_1 = require("../contracts/L2MessageReadOnlyProvider");
class PostmanServiceClient {
    constructor(config) {
        this.config = config;
        this.logger = (0, logger_1.getLogger)(PostmanServiceClient.name, config?.loggerOptions);
        this.l1L2AutoClaimEnabled = config.l1L2AutoClaimEnabled;
        this.l2L1AutoClaimEnabled = config.l2L1AutoClaimEnabled;
        const l1Provider = new ethers_1.JsonRpcProvider(config.l1Config.rpcUrl);
        const l2Provider = new ethers_1.JsonRpcProvider(config.l2Config.rpcUrl);
        const l1Signer = this.getSigner(config.l1Config.claiming.signerPrivateKey, l1Provider);
        const l2Signer = this.getSigner(config.l2Config.claiming.signerPrivateKey, l2Provider);
        const l2MessageReadOnlyProvider = new L2MessageReadOnlyProvider_1.L2MessageReadOnlyProvider(l2Provider, config.l2Config.messageServiceContractAddress, config.l2Config.l2MessageTreeDepth);
        const l1MessageServiceContract = new contracts_1.L1MessageServiceContract(l1Provider, config.l1Config.messageServiceContractAddress, l2MessageReadOnlyProvider, "read-write", l1Signer, config.l1Config.claiming.maxFeePerGas, config.l1Config.claiming.gasEstimationPercentile, config.l1Config.claiming.isMaxGasFeeEnforced);
        const l2MessageServiceContract = new contracts_1.L2MessageServiceContract(l2Provider, config.l2Config.messageServiceContractAddress, "read-write", l2Signer, config.l2Config.claiming.maxFeePerGas, config.l2Config.claiming.gasEstimationPercentile, config.l2Config.claiming.isMaxGasFeeEnforced);
        this.db = dataSource_1.DB.create(this.config.databaseOptions);
        // L1 -> L2 flow
        this.l1EventListener = new listeners_1.L1SentEventListener(this.db, l1MessageServiceContract, config.l1Config, config?.loggerOptions);
        this.l2AnchoredEventListener = new listeners_1.L2AnchoredEventListener(this.db, l2MessageServiceContract, config.l2Config, config.l1Config.messageServiceContractAddress, config?.loggerOptions);
        this.l2ClaimTxSender = new transactions_1.L2ClaimTxSender(this.db, l2MessageServiceContract, config.l2Config, config.l1Config.messageServiceContractAddress, config?.loggerOptions);
        this.l2ClaimStatusWatcher = new transactions_1.L2ClaimStatusWatcher(this.db, l2MessageServiceContract, config.l2Config, config?.loggerOptions);
        // L2 -> L1 flow
        this.l2EventListener = new listeners_1.L2SentEventListener(this.db, l2MessageServiceContract, config.l2Config, config?.loggerOptions);
        this.l1AnchoredEventListener = new listeners_1.L1AnchoredEventListener(this.db, l1MessageServiceContract, config.l1Config, config.l2Config.messageServiceContractAddress, config?.loggerOptions);
        this.l1ClaimTxSender = new transactions_1.L1ClaimTxSender(this.db, l1MessageServiceContract, config.l1Config, config.l2Config.messageServiceContractAddress, config?.loggerOptions);
        this.l1ClaimStatusWatcher = new transactions_1.L1ClaimStatusWatcher(this.db, l1MessageServiceContract, config.l1Config, config?.loggerOptions);
        this.databaseCleaner = new DatabaseCleaner_1.DatabaseCleaner(this.db, config?.databaseCleanerConfig, config?.loggerOptions);
    }
    getSigner(privateKey, provider) {
        try {
            return new ethers_1.Wallet(privateKey, provider);
        }
        catch (e) {
            throw new Error("Something went wrong when trying to generate Wallet. Please check your private key and the provider url.");
        }
    }
    async connectDatabase() {
        await this.db.initialize();
    }
    startAllServices() {
        if (this.l1L2AutoClaimEnabled) {
            // L1 -> L2 flow
            this.l1EventListener.start();
            this.l2AnchoredEventListener.start();
            this.l2ClaimTxSender.start();
            this.l2ClaimStatusWatcher.start();
        }
        if (this.l2L1AutoClaimEnabled) {
            // L2 -> L1 flow
            this.l2EventListener.start();
            this.l1AnchoredEventListener.start();
            this.l1ClaimTxSender.start();
            this.l1ClaimStatusWatcher.start();
        }
        this.databaseCleaner.start();
        this.logger.info("All listeners and message deliverers have been started.");
    }
    stopAllServices() {
        if (this.l1L2AutoClaimEnabled) {
            // L1 -> L2 flow
            this.l1EventListener.stop();
            this.l2AnchoredEventListener.stop();
            this.l2ClaimTxSender.stop();
            this.l2ClaimStatusWatcher.stop();
        }
        if (this.l2L1AutoClaimEnabled) {
            // L2 -> L1 flow
            this.l2EventListener.stop();
            this.l1AnchoredEventListener.stop();
            this.l1ClaimTxSender.stop();
            this.l1ClaimStatusWatcher.stop();
        }
        this.databaseCleaner.stop();
        this.logger.info("All listeners and message deliverers have been stopped.");
    }
}
exports.PostmanServiceClient = PostmanServiceClient;
