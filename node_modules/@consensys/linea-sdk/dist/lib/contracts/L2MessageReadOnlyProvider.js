"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.L2MessageReadOnlyProvider = void 0;
const EventParser_1 = require("./EventParser");
const typechain_1 = require("../../typechain");
const constants_1 = require("../utils/constants");
class L2MessageReadOnlyProvider {
    constructor(provider, contractAddress, l2MessageTreeDepth) {
        this.provider = provider;
        this.contractAddress = contractAddress;
        this.contract = this.getContract(this.contractAddress);
        this.l2MessageTreeDepth = l2MessageTreeDepth ?? constants_1.DEFAULT_L2_MESSAGE_TREE_DEPTH;
    }
    /**
     * Get message sent events by message hash.
     * @param messageHash The hash of the message sent on L2.
     * @returns Message information (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     */
    async getMessageSentEventsByMessageHash(messageHash, fromBlock, toBlock, fromBlockLogIndex) {
        const messageSentFilter = this.contract.filters.MessageSent(undefined, undefined, undefined, undefined, undefined, undefined, messageHash);
        let events = await this.contract.queryFilter(messageSentFilter, fromBlock, toBlock?.toString());
        events = events.filter((event) => {
            if (typeof fromBlockLogIndex === "undefined" || typeof fromBlock === "undefined") {
                return true;
            }
            if (event.blockNumber === fromBlock && event.index < fromBlockLogIndex) {
                return false;
            }
            return true;
        });
        if (events.length > 0) {
            return EventParser_1.EventParser.filterAndParseEvents(events);
        }
        return [];
    }
    /**
     * Get message sent events within the given block range.
     * @param messageHash The hash of the message sent on L2.
     * @returns Message information (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     */
    async getMessageSentEventsByBlockRange(fromBlock, toBlock) {
        const messageSentFilter = this.contract.filters.MessageSent();
        const events = await this.contract.queryFilter(messageSentFilter, fromBlock, toBlock);
        if (events.length > 0) {
            return EventParser_1.EventParser.filterAndParseEvents(events);
        }
        return [];
    }
    /**
     * Get the L2MessageService contract instance.
     * @param contractAddress Address of the L2 contract.
     * @param signer L2 ethers signer instance.
     * @returns The L2MessageService contract instance.
     */
    getContract(contractAddress) {
        return typechain_1.L2MessageService__factory.connect(contractAddress, this.provider);
    }
}
exports.L2MessageReadOnlyProvider = L2MessageReadOnlyProvider;
