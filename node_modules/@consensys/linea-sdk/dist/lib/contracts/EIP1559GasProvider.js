"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EIP1559GasProvider = void 0;
const errors_1 = require("../utils/errors");
const constants_1 = require("../utils/constants");
class EIP1559GasProvider {
    constructor(provider, maxFeePerGas, gasEstimationPercentile, enforceMaxGasFee) {
        this.provider = provider;
        this.maxFeePerGasFromConfig = BigInt(maxFeePerGas ?? constants_1.DEFAULT_MAX_FEE_PER_GAS);
        this.gasEstimationPercentile = gasEstimationPercentile ?? constants_1.DEFAULT_GAS_ESTIMATION_PERCENTILE;
        this.cacheIsValidForBlockNumber = 0n;
        this.feesCacheOld = { maxFeePerGas: this.maxFeePerGasFromConfig };
        this.feesCache = { maxFeePerGas: this.maxFeePerGasFromConfig };
        this.isMaxGasFeeEnforced = enforceMaxGasFee ?? constants_1.DEFAULT_ENFORCE_MAX_GAS_FEE;
    }
    async get1559Fees(percentile = this.gasEstimationPercentile) {
        if (this.isMaxGasFeeEnforced) {
            return {
                maxPriorityFeePerGas: this.maxFeePerGasFromConfig,
                maxFeePerGas: this.maxFeePerGasFromConfig,
            };
        }
        const currentBlockNumber = await this.provider.getBlockNumber();
        if (this.cacheIsValidForBlockNumber < BigInt(currentBlockNumber)) {
            const { reward, baseFeePerGas } = await this.provider.send("eth_feeHistory", [
                "0x4",
                "latest",
                [percentile],
            ]);
            const maxPriorityFeePerGas = reward.reduce((acc, currentValue) => acc + BigInt(currentValue[0]), 0n) /
                BigInt(reward.length);
            if (maxPriorityFeePerGas && maxPriorityFeePerGas > this.maxFeePerGasFromConfig) {
                throw new errors_1.FeeEstimationError(`Estimated miner tip of ${maxPriorityFeePerGas} exceeds configured max fee per gas of ${this.maxFeePerGasFromConfig}!`);
            }
            this.cacheIsValidForBlockNumber = BigInt(currentBlockNumber);
            const maxFeePerGas = BigInt(baseFeePerGas[baseFeePerGas.length - 1]) * 2n + maxPriorityFeePerGas;
            if (maxFeePerGas > 0n && maxPriorityFeePerGas > 0n) {
                this.feesCache = {
                    maxPriorityFeePerGas,
                    maxFeePerGas: maxFeePerGas > this.maxFeePerGasFromConfig ? this.maxFeePerGasFromConfig : maxFeePerGas,
                };
            }
            else {
                this.feesCache = {
                    maxFeePerGas: this.maxFeePerGasFromConfig,
                };
            }
        }
        return this.feesCache;
    }
}
exports.EIP1559GasProvider = EIP1559GasProvider;
