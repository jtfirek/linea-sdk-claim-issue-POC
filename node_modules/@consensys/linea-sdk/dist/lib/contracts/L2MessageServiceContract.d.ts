import { BytesLike, Overrides, ContractTransactionResponse, JsonRpcProvider, TransactionReceipt, TransactionResponse, Signer } from "ethers";
import { Message, SDKMode, ParsedEvent } from "../utils/types";
import { L2MessageService } from "../../typechain";
import { EIP1559GasProvider } from "./EIP1559GasProvider";
import { OnChainMessageStatus } from "../utils/enum";
import { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog } from "../../typechain/common";
export declare class L2MessageServiceContract extends EIP1559GasProvider {
    readonly provider: JsonRpcProvider;
    readonly contractAddress: string;
    private readonly mode;
    readonly signer?: Signer | undefined;
    readonly contract: L2MessageService;
    constructor(provider: JsonRpcProvider, contractAddress: string, mode: SDKMode, signer?: Signer | undefined, maxFeePerGas?: number, gasEstimationPercentile?: number, enforceMaxGasFee?: boolean);
    /**
     * Get the L2MessageService contract abi.
     * @returns The L2MessageService contract abi.
     */
    getContractAbi(): readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }];
        readonly name: "FeePaymentFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FeeTooLow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FinalRollingHashIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "pauseType";
            readonly type: "uint256";
        }];
        readonly name: "IsNotPaused";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "pauseType";
            readonly type: "uint256";
        }];
        readonly name: "IsPaused";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "found";
            readonly type: "uint256";
        }];
        readonly name: "L1MessageNumberSynchronizationWrong";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "found";
            readonly type: "bytes32";
        }];
        readonly name: "L1RollingHashSynchronizationWrong";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LimitIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "MessageDoesNotExistOrHasAlreadyBeenClaimed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "length";
            readonly type: "uint256";
        }];
        readonly name: "MessageHashesListLengthHigherThanOneHundred";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "destination";
            readonly type: "address";
        }];
        readonly name: "MessageSendingFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PeriodIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RateLimitExceeded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ServiceHasMigratedToRollingHashes";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ValueSentTooLow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ZeroAddressNotAllowed";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "resettingAddress";
            readonly type: "address";
        }];
        readonly name: "AmountUsedInPeriodReset";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes32[]";
            readonly name: "messageHashes";
            readonly type: "bytes32[]";
        }];
        readonly name: "L1L2MessageHashesAddedToInbox";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "amountChangeBy";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "amountUsedLoweredToLimit";
            readonly type: "bool";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "usedAmountResetToZero";
            readonly type: "bool";
        }];
        readonly name: "LimitAmountChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "MessageClaimed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_fee";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_nonce";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_calldata"; /**
             * Get the current L2 block number.
             * @returns The current L2 block number.
             */
            readonly type: "bytes";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "MessageSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "previousMinimumFee";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newMinimumFee";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "calledBy";
            readonly type: "address";
        }];
        readonly name: "MinimumFeeChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "messageSender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "pauseType";
            readonly type: "uint256";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "periodInSeconds";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "limitInWei";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "currentPeriodEnd";
            readonly type: "uint256";
        }];
        readonly name: "RateLimitInitialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "messageNumber";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "rollingHash";
            readonly type: "bytes32";
        }];
        readonly name: "RollingHashUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "version";
            readonly type: "uint256";
        }];
        readonly name: "ServiceVersionMigrated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "messageSender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "pauseType";
            readonly type: "uint256";
        }];
        readonly name: "UnPaused";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "GENERAL_PAUSE_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "INBOX_STATUS_CLAIMED";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "INBOX_STATUS_RECEIVED";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "INBOX_STATUS_UNKNOWN";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "L1_L2_MESSAGE_SETTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "L1_L2_PAUSE_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "L2_L1_PAUSE_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "MINIMUM_FEE_SETTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PAUSE_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PROVING_SYSTEM_PAUSE_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "RATE_LIMIT_SETTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "_messageHashes";
            readonly type: "bytes32[]";
        }];
        readonly name: "addL1L2MessageHashes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "_messageHashes";
            readonly type: "bytes32[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "_startingMessageNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_finalMessageNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_finalRollingHash";
            readonly type: "bytes32";
        }];
        readonly name: "anchorL1L2MessageHashes";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "address payable";
            readonly name: "_feeRecipient";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_nonce";
            readonly type: "uint256";
        }];
        readonly name: "claimMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentPeriodAmountInWei";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentPeriodEnd";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "inboxL1L2MessageStatus";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "messageStatus";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_securityCouncil";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_l1l2MessageSetter";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_rateLimitPeriod";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_rateLimitAmount";
            readonly type: "uint256";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_pauseType";
            readonly type: "uint8";
        }];
        readonly name: "isPaused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "messageNumber";
            readonly type: "uint256";
        }];
        readonly name: "l1RollingHashes";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "rollingHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lastAnchoredL1MessageNumber";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "limitInWei";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "minimumFeeInWei";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nextMessageNumber";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_pauseType";
            readonly type: "uint8";
        }];
        readonly name: "pauseByType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "pauseType";
            readonly type: "bytes32";
        }];
        readonly name: "pauseTypeStatuses";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "pauseStatus";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "periodInSeconds";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "resetAmountUsedInPeriod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "resetRateLimitAmount";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "sendMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sender";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_feeInWei";
            readonly type: "uint256";
        }];
        readonly name: "setMinimumFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_pauseType";
            readonly type: "uint8";
        }];
        readonly name: "unPauseByType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    /**
     * Get message information by message hash.
     * @param messageHash The hash of the message sent on L2.
     * @returns Message information (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     */
    getMessageByMessageHash(messageHash: string): Promise<Message | null>;
    /**
     * Get messages information by transaction hash.
     * @param transactionHash The hash of the sendMessage transaction on L2.
     * @returns An array of message information (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     */
    getMessagesByTransactionHash(transactionHash: string): Promise<Message[] | null>;
    /**
     * Get transaction receipt by message hash.
     * @param messageHash The hash of the message sent on L2.
     * @returns The sendMessage transaction receipt.
     */
    getTransactionReceiptByMessageHash(messageHash: string): Promise<TransactionReceipt | null>;
    /**
     * Get the L2MessageService contract instance.
     * @param contractAddress Address of the L2 contract.
     * @param signer L2 ethers signer instance.
     * @returns The L2MessageService contract instance.
     */
    getContract(contractAddress: string, signer?: Signer): L2MessageService;
    /**
     * Get the current account nonce.
     * @param accountAddress Account address.
     * @returns The nonce of the accountAddress passed as param or the l2 signer address.
     */
    getCurrentNonce(accountAddress?: string): Promise<number>;
    /**
     * Get the current L2 block number.
     * @returns The current L2 block number.
     */
    getCurrentBlockNumber(): Promise<number>;
    /**
     * Get events emitted on L2.
     * @param eventFilter The event filter.
     * @param fromBlock The earliest block to seach for events.
     * @param toBlock The latest block to search for events.
     * @param fromBlockLogIndex Block log index.
     * @returns A list of events.
     */
    getEvents<TCEvent extends TypedContractEvent>(eventFilter: TypedDeferredTopicFilter<TypedContractEvent>, fromBlock?: number, toBlock?: string | number, fromBlockLogIndex?: number): Promise<ParsedEvent<TypedEventLog<TCEvent>>[]>;
    /**
     * Get the L1 message status on L2.
     * @param messageHash The hash of the message sent on L1.
     * @param overrides Ethers call overrides.
     * @returns Message status (CLAIMED, CLAIMABLE, UNKNOWN).
     */
    getMessageStatus(messageHash: BytesLike, overrides?: Overrides): Promise<OnChainMessageStatus>;
    /**
     * Estimate claimMessage transaction gas.
     * @param message Message information object (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     * @param overrides Ethers payable overrides.
     * @returns The claimMessage transaction gas estimation.
     */
    estimateClaimGas(message: Message & {
        feeRecipient?: string;
    }, overrides?: Overrides): Promise<bigint>;
    /**
     * Claims the message on L2.
     * @param message Message information object (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     * @param overrides Ethers payable overrides.
     * @returns The claimMessage transaction info.
     */
    claim(message: Message & {
        feeRecipient?: string;
    }, overrides?: Overrides): Promise<ContractTransactionResponse>;
    /**
     * Retry a specific transaction.
     * @param transactionHash The hash of the transaction.
     * @param overrides EIP1559 fees info.
     * @returns The transaction information.
     */
    retryTransactionWithHigherFee(transactionHash: string, overrides?: {
        maxPriorityFeePerGas?: bigint;
        maxFeePerGas?: bigint;
    }): Promise<TransactionResponse>;
}
