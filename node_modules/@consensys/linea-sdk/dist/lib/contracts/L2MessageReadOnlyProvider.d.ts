import { BlockTag, BytesLike, JsonRpcProvider } from "ethers";
import { ParsedEvent } from "../utils/types";
import { TypedEventLog } from "../../typechain/common";
import { MessageSentEvent } from "../../typechain/L2MessageService";
import { L2MessageService } from "../../typechain";
export declare class L2MessageReadOnlyProvider {
    readonly provider: JsonRpcProvider;
    readonly contractAddress: string;
    readonly contract: L2MessageService;
    readonly l2MessageTreeDepth: number;
    constructor(provider: JsonRpcProvider, contractAddress: string, l2MessageTreeDepth?: number);
    /**
     * Get message sent events by message hash.
     * @param messageHash The hash of the message sent on L2.
     * @returns Message information (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     */
    getMessageSentEventsByMessageHash(messageHash: BytesLike, fromBlock?: number, toBlock?: BlockTag, fromBlockLogIndex?: number): Promise<ParsedEvent<TypedEventLog<MessageSentEvent.Event>>[]>;
    /**
     * Get message sent events within the given block range.
     * @param messageHash The hash of the message sent on L2.
     * @returns Message information (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     */
    getMessageSentEventsByBlockRange(fromBlock: number, toBlock: number): Promise<ParsedEvent<TypedEventLog<MessageSentEvent.Event>>[]>;
    /**
     * Get the L2MessageService contract instance.
     * @param contractAddress Address of the L2 contract.
     * @param signer L2 ethers signer instance.
     * @returns The L2MessageService contract instance.
     */
    private getContract;
}
