import { BytesLike, Overrides, ContractTransactionResponse, JsonRpcProvider, TransactionReceipt, TransactionResponse, Signer } from "ethers";
import { LineaRollup } from "../../typechain";
import { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog } from "../../typechain/common";
import { Message, SDKMode, ParsedEvent, MessageWithProof } from "../utils/types";
import { EIP1559GasProvider } from "./EIP1559GasProvider";
import { OnChainMessageStatus } from "../utils/enum";
import { Proof } from "../sdk/merkleTree/types";
import { FinalizationMessagingInfo } from "../sdk/claiming/types";
import { L2MessageReadOnlyProvider } from "./L2MessageReadOnlyProvider";
export declare class L1MessageServiceContract extends EIP1559GasProvider {
    readonly provider: JsonRpcProvider;
    readonly contractAddress: string;
    readonly l2MessageReadOnlyProvider: L2MessageReadOnlyProvider;
    private readonly mode;
    readonly signer?: Signer | undefined;
    readonly contract: LineaRollup;
    constructor(provider: JsonRpcProvider, contractAddress: string, l2MessageReadOnlyProvider: L2MessageReadOnlyProvider, mode: SDKMode, signer?: Signer | undefined, maxFeePerGas?: number, gasEstimationPercentile?: number, isMaxGasFeeEnforced?: boolean);
    /**
     * Get the LineaRollup contract abi.
     * @returns The LineaRollup contract abi.
     */
    getContractAbi(): readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "l2BlockTimestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "currentBlockTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "BlockTimestampError";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BytesLengthNotMultipleOf32";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "bytesLength";
            readonly type: "uint256";
        }];
        readonly name: "BytesLengthNotMultipleOfTwo";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "currentDataHash";
            readonly type: "bytes32";
        }];
        readonly name: "DataAlreadySubmitted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "DataEndingBlockDoesNotMatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "value";
            readonly type: "bytes32";
        }];
        readonly name: "DataHashesNotInSequence";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DataParentHasEmptyShnarf";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "DataStartingBlockDoesNotMatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyBlock";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyBlockDataArray";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptySubmissionData";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }];
        readonly name: "FeePaymentFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FeeTooLow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "FinalBlockNumberInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "finalBlockNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lastFinalizedBlock";
            readonly type: "uint256";
        }];
        readonly name: "FinalBlockNumberLessThanOrEqualToLastFinalizedBlock";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FinalBlockStateEqualsZeroHash";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "firstHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "secondHash";
            readonly type: "bytes32";
        }];
        readonly name: "FinalStateRootHashDoesNotMatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FinalizationDataMissing";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "l2BlockTimestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "currentBlockTimestamp";
            readonly type: "uint256";
        }];
        readonly name: "FinalizationInTheFuture";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "firstBlockNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "finalBlockNumber";
            readonly type: "uint256"; /**
             * Get the LineaRollup contract instance.
             * @param contractAddress Address of the L1 contract.
             * @param signer L1 ethers signer instance.
             * @returns The LineaRollup contract instance.
             */
        }];
        readonly name: "FirstBlockGreaterThanFinalBlock";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "firstBlockNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lastFinalizedBlock";
            readonly type: "uint256";
        }];
        readonly name: "FirstBlockLessThanOrEqualToLastFinalizedBlock";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FirstByteIsNotZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidMerkleProof";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidProof";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidProofType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "pauseType";
            readonly type: "uint256";
        }];
        readonly name: "IsNotPaused";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "pauseType";
            readonly type: "uint256";
        }];
        readonly name: "IsPaused";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "L1L2MessageNotSent";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "messageNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "rollingHash";
            readonly type: "bytes32";
        }];
        readonly name: "L1RollingHashDoesNotExistOnL1";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "merkleRoot";
            readonly type: "bytes32";
        }];
        readonly name: "L2MerkleRootAlreadyAnchored";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "L2MerkleRootDoesNotExist";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LimitIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "inde";
            readonly type: "uint256";
        }];
        readonly name: "MemoryOutOfBounds";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "messageIndex";
            readonly type: "uint256";
        }];
        readonly name: "MessageAlreadyClaimed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "MessageAlreadyReceived";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "MessageDoesNotExistOrHasAlreadyBeenClaimed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "destination";
            readonly type: "address";
        }];
        readonly name: "MessageSendingFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "rollingHash";
            readonly type: "bytes32";
        }];
        readonly name: "MissingMessageNumberForRollingHash";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "messageNumber";
            readonly type: "uint256";
        }];
        readonly name: "MissingRollingHashForMessageNumber";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotList";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "firstHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "secondHash";
            readonly type: "bytes32";
        }];
        readonly name: "ParentHashesDoesNotMatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PeriodIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProofIsEmpty";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }];
        readonly name: "ProofLengthDifferentThanMerkleDepth";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RateLimitExceeded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "StartingRootHashDoesNotMatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "actual";
            readonly type: "bytes32";
        }];
        readonly name: "StateRootHashInvalid";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SystemMigrationBlockZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "TimestampsNotInSequence";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TransactionShort";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes1";
            readonly name: "versionByte";
            readonly type: "bytes1";
        }];
        readonly name: "UnknownTransactionType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ValueSentTooLow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "WrongBytesLength";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ZeroAddressNotAllowed";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "resettingAddress";
            readonly type: "address";
        }];
        readonly name: "AmountUsedInPeriodReset";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "blockNumber";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "stateRootHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bool";
            readonly name: "finalizedWithProof";
            readonly type: "bool";
        }];
        readonly name: "BlockFinalized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "lastBlockFinalized";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "startingRootHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "finalRootHash";
            readonly type: "bytes32";
        }];
        readonly name: "BlocksVerificationDone";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "lastBlockFinalized";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "startingRootHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "finalRootHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "withProof";
            readonly type: "bool";
        }];
        readonly name: "DataFinalized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "dataHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "startBlock";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "endBlock";
            readonly type: "uint256";
        }];
        readonly name: "DataSubmitted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes32[]";
            readonly name: "messageHashes";
            readonly type: "bytes32[]";
        }];
        readonly name: "L1L2MessagesReceivedOnL2";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "L2L1MessageHashAddedToInbox";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "l2MerkleRoot";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "treeDepth";
            readonly type: "uint256";
        }];
        readonly name: "L2MerkleRootAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "l2Block";
            readonly type: "uint256";
        }];
        readonly name: "L2MessagingBlockAnchored";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "amountChangeBy";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "amountUsedLoweredToLimit";
            readonly type: "bool";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "usedAmountResetToZero";
            readonly type: "bool";
        }];
        readonly name: "LimitAmountChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "MessageClaimed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_fee";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_nonce";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "MessageSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "messageSender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "pauseType";
            readonly type: "uint256";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "periodInSeconds";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "limitInWei";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "currentPeriodEnd";
            readonly type: "uint256";
        }];
        readonly name: "RateLimitInitialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "messageNumber";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "rollingHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "RollingHashUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "systemMigrationBlock";
            readonly type: "uint256";
        }];
        readonly name: "SystemMigrationBlockInitialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "messageSender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "pauseType";
            readonly type: "uint256";
        }];
        readonly name: "UnPaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "verifierAddress";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "proofType";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "verifierSetBy";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldVerifierAddress";
            readonly type: "address";
        }];
        readonly name: "VerifierAddressChanged";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "GENERAL_PAUSE_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "INBOX_STATUS_RECEIVED";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "INBOX_STATUS_UNKNOWN";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "L1_L2_PAUSE_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "L2_L1_PAUSE_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "OPERATOR_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "OUTBOX_STATUS_RECEIVED";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "OUTBOX_STATUS_SENT";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "OUTBOX_STATUS_UNKNOWN";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PAUSE_MANAGER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PROVING_SYSTEM_PAUSE_TYPE";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "RATE_LIMIT_SETTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "VERIFIER_SETTER_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_value";
            readonly type: "uint256";
        }, {
            readonly internalType: "address payable";
            readonly name: "_feeRecipient";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_nonce";
            readonly type: "uint256";
        }];
        readonly name: "claimMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32[]";
                readonly name: "proof";
                readonly type: "bytes32[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "messageNumber";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "leafIndex";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "from";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "fee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "address payable";
                readonly name: "feeRecipient";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "merkleRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IL1MessageService.ClaimMessageWithProofParams";
            readonly name: "_params";
            readonly type: "tuple";
        }];
        readonly name: "claimMessageWithProof";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentL2BlockNumber";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentL2StoredL1MessageNumber";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentL2StoredL1RollingHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentPeriodAmountInWei";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentPeriodEnd";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "currentTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataHash";
            readonly type: "bytes32";
        }];
        readonly name: "dataEndingBlock";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "endingBlock";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataHash";
            readonly type: "bytes32";
        }];
        readonly name: "dataFinalStateRootHashes";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "finalStateRootHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataHash";
            readonly type: "bytes32";
        }];
        readonly name: "dataParents";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "parentHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataHash";
            readonly type: "bytes32";
        }];
        readonly name: "dataShnarfHashes";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "shnarfHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "dataHash";
            readonly type: "bytes32";
        }];
        readonly name: "dataStartingBlock";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "startingBlock";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "blockRootHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint32";
                readonly name: "l2BlockTimestamp";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "transactions";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "bytes32[]";
                readonly name: "l2ToL1MsgHashes";
                readonly type: "bytes32[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "fromAddresses";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint16[]";
                readonly name: "batchReceptionIndices";
                readonly type: "uint16[]";
            }];
            readonly internalType: "struct IZkEvmV2.BlockData[]";
            readonly name: "_blocksData";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "_proof";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_proofType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_parentStateRootHash";
            readonly type: "bytes32";
        }];
        readonly name: "finalizeBlocks";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "blockRootHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint32";
                readonly name: "l2BlockTimestamp";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "transactions";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "bytes32[]";
                readonly name: "l2ToL1MsgHashes";
                readonly type: "bytes32[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "fromAddresses";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint16[]";
                readonly name: "batchReceptionIndices";
                readonly type: "uint16[]";
            }];
            readonly internalType: "struct IZkEvmV2.BlockData[]";
            readonly name: "_blocksData";
            readonly type: "tuple[]";
        }];
        readonly name: "finalizeBlocksWithoutProof";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_aggregatedProof";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_proofType";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "parentStateRootHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32[]";
                readonly name: "dataHashes";
                readonly type: "bytes32[]";
            }, {
                readonly internalType: "bytes32";
                readonly name: "dataParentHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "finalBlockNumber";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lastFinalizedTimestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "finalTimestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "l1RollingHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "l1RollingHashMessageNumber";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32[]";
                readonly name: "l2MerkleRoots";
                readonly type: "bytes32[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "l2MerkleTreesDepth";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "l2MessagingBlocksOffsets";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ILineaRollup.FinalizationData";
            readonly name: "_finalizationData";
            readonly type: "tuple";
        }];
        readonly name: "finalizeCompressedBlocksWithProof";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "parentStateRootHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32[]";
                readonly name: "dataHashes";
                readonly type: "bytes32[]";
            }, {
                readonly internalType: "bytes32";
                readonly name: "dataParentHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "finalBlockNumber";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lastFinalizedTimestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "finalTimestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "l1RollingHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "l1RollingHashMessageNumber";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32[]";
                readonly name: "l2MerkleRoots";
                readonly type: "bytes32[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "l2MerkleTreesDepth";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "l2MessagingBlocksOffsets";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ILineaRollup.FinalizationData";
            readonly name: "_finalizationData";
            readonly type: "tuple";
        }];
        readonly name: "finalizeCompressedBlocksWithoutProof";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "inboxL2L1MessageStatus";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "messageStatus";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_initialStateRootHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_initialL2BlockNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_defaultVerifier";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_securityCouncil";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "_operators";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "_rateLimitPeriodInSeconds";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_rateLimitAmountInWei";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_systemMigrationBlock";
            readonly type: "uint256";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_systemMigrationBlock";
            readonly type: "uint256";
        }];
        readonly name: "initializeSystemMigrationBlock";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_messageNumber";
            readonly type: "uint256";
        }];
        readonly name: "isMessageClaimed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_pauseType";
            readonly type: "uint8";
        }];
        readonly name: "isPaused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "merkleRoot";
            readonly type: "bytes32";
        }];
        readonly name: "l2MerkleRootsDepths";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "treeDepth";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "limitInWei";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nextMessageNumber";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly name: "outboxL1L2MessageStatus";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "messageStatus";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_pauseType";
            readonly type: "uint8";
        }];
        readonly name: "pauseByType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "pauseType";
            readonly type: "bytes32";
        }];
        readonly name: "pauseTypeStatuses";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "pauseStatus";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "periodInSeconds";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "resetAmountUsedInPeriod";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "resetRateLimitAmount";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "messageNumber";
            readonly type: "uint256";
        }];
        readonly name: "rollingHashes";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "rollingHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "sendMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sender";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_newVerifierAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_proofType";
            readonly type: "uint256";
        }];
        readonly name: "setVerifierAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "blockNumber";
            readonly type: "uint256";
        }];
        readonly name: "stateRootHashes";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "stateRootHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "parentStateRootHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "dataParentHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "finalStateRootHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "firstBlockInData";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "finalBlockInData";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "snarkHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "compressedData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ILineaRollup.SubmissionData";
            readonly name: "_submissionData";
            readonly type: "tuple";
        }];
        readonly name: "submitData";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "systemMigrationBlock";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "_pauseType";
            readonly type: "uint8";
        }];
        readonly name: "unPauseByType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "proofType";
            readonly type: "uint256";
        }];
        readonly name: "verifiers";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "verifierAddress";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    /**
     * Get message information by message hash.
     * @param messageHash The hash of the message sent on L1.
     * @returns Message information (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     */
    getMessageByMessageHash(messageHash: string): Promise<Message | null>;
    /**
     * Get messages information by transaction hash.
     * @param transactionHash The hash of the sendMessage transaction on L1.
     * @returns An array of message information (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     */
    getMessagesByTransactionHash(transactionHash: string): Promise<Message[] | null>;
    /**
     * Get transaction receipt by message hash.
     * @param messageHash The hash of the message sent on L1.
     * @returns The sendMessage transaction receipt.
     */
    getTransactionReceiptByMessageHash(messageHash: string): Promise<TransactionReceipt | null>;
    /**
     * Get the LineaRollup contract instance.
     * @param contractAddress Address of the L1 contract.
     * @param signer L1 ethers signer instance.
     * @returns The LineaRollup contract instance.
     */
    getContract(contractAddress: string, signer?: Signer): LineaRollup;
    /**
     * Get the current account nonce.
     * @param accountAddress Account address.
     * @returns The nonce of the accountAddress passed as param or the l1 signer address.
     */
    getCurrentNonce(accountAddress?: string): Promise<number>;
    /**
     * Get the current L1 block number.
     * @returns The current L1 block number.
     */
    getCurrentBlockNumber(): Promise<number>;
    /**
     * Get events emitted on L1.
     * @param eventFilter The event filter.
     * @param fromBlock The earliest block to seach for events.
     * @param toBlock The latest block to search for events.
     * @param fromBlockLogIndex Block log index.
     * @returns A list of events.
     */
    getEvents<TCEevent extends TypedContractEvent>(eventFilter: TypedDeferredTopicFilter<TypedContractEvent>, fromBlock?: number, toBlock?: string | number, fromBlockLogIndex?: number): Promise<ParsedEvent<TypedEventLog<TCEevent>>[]>;
    /**
     * Get the L2 message status on L1 using message hash (for messages sent before migration).
     * @param messageHash The hash of the message sent on L2.
     * @param overrides Ethers call overrides.
     * @returns Message status (CLAIMED, CLAIMABLE, UNKNOWN).
     */
    getMessageStatusUsingMessageHash(messageHash: BytesLike, overrides?: Overrides): Promise<OnChainMessageStatus>;
    /**
     * Get the L2 message status on L1.
     * @param messageHash The hash of the message sent on L2.
     * @param overrides Ethers call overrides.
     * @returns Message status (CLAIMED, CLAIMABLE, UNKNOWN).
     */
    getMessageStatus(messageHash: BytesLike, overrides?: Overrides): Promise<OnChainMessageStatus>;
    getMessageStatusUsingMerkleTree(messageHash: BytesLike, overrides?: Overrides): Promise<OnChainMessageStatus>;
    /**
     * Estimate claimMessage transaction gas.
     * @param message Message information object (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     * @param overrides Ethers payable overrides.
     * @returns The claimMessage transaction gas estimation.
     */
    estimateClaimWithoutProofGas(message: Message & {
        feeRecipient?: string;
    }, overrides?: Overrides): Promise<bigint>;
    /**
     * Estimate claimMessageWithProof transaction gas.
     * @param message Message information object (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     * @param overrides Ethers payable overrides.
     * @returns The claimMessageWithProof transaction gas estimation.
     */
    estimateClaimGas(message: Message & {
        feeRecipient?: string;
    }, overrides?: Overrides): Promise<bigint>;
    /**
     * Claims the message on L1.
     * @param message Message information object (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     * @param overrides Ethers payable overrides.
     * @returns The claimMessage transaction info.
     */
    claimWithoutProof(message: Message & {
        feeRecipient?: string;
    }, overrides?: Overrides): Promise<ContractTransactionResponse>;
    /**
     * Claims the message on L1.
     * @param message Message information object (messageSender,destination,fee,value,messageNonce,calldata,messageHash).
     * @param overrides Ethers payable overrides.
     * @returns The claimMessage transaction info.
     */
    claim(message: Message & {
        feeRecipient?: string;
    }, overrides?: Overrides): Promise<ContractTransactionResponse>;
    getFinalizationMessagingInfo(transactionHash: string): Promise<FinalizationMessagingInfo>;
    getL2MessageHashesInBlockRange(fromBlock: number, toBlock: number): Promise<string[]>;
    getMessageSiblings(messageHash: string, messageHashes: string[], treeDepth: number): string[];
    getMessageProof(messageHash: string): Promise<Proof>;
    /**
     * Retry a specific transaction.
     * @param transactionHash The hash of the transaction.
     * @param overrides EIP1559 fees info.
     * @returns The transaction information.
     */
    retryTransactionWithHigherFee(transactionHash: string, overrides?: {
        maxPriorityFeePerGas?: bigint;
        maxFeePerGas?: bigint;
    }): Promise<TransactionResponse>;
    /**
     * Estimate claimMessageWithProof transaction gas.
     * @param message Message information object (messageSender,destination,fee,value,messageNonce,calldata,messageHash,proof,leafIndex,merkleRoot).
     * @param overrides Ethers payable overrides.
     * @returns The claimMessageWithProof transaction gas estimation.
     */
    estimateClaimWithProofGas(messageWithProof: MessageWithProof & {
        feeRecipient?: string;
    }, overrides?: Overrides): Promise<bigint>;
    /**
     * Claims the message using merkle proof on L1.
     * @param message Message information object (messageSender,destination,fee,value,messageNonce,calldata,messageHash,proof,leafIndex,merkleRoot).
     * @param overrides Ethers payable overrides.
     * @returns The claimMessageWithProof transaction info.
     */
    claimWithProof(message: MessageWithProof & {
        feeRecipient?: string;
    }, overrides?: Overrides): Promise<ContractTransactionResponse>;
}
